LQRController:
  description: |
    This class implements a Linear Quadratic Regulator (LQR) controller for a given linear dynamic model.
    The controller computes control inputs based on the state deviations from a given equilibrium.
    The input and output depends on the given linear dynamic model. 
    The linear model can be the linearization of the equations of motion.
  args:
    - name: model
      type: Diagram
      description: A Diagram containing the linear system for which the LQR controller is designed.
    - name: Q
      type: numpy.ndarray
      description: State cost matrix.
    - name: R
      type: numpy.ndarray
      description: Control cost matrix.
    - name: x0
      type: numpy.ndarray
      description: Equilibrium state around which the controller is designed.
    - name: u0
      type: numpy.ndarray
      description: Equilibrium control input.
  input_ports:
    - name: state
      type: BasicVector
      size: "len(x0)"
      description: Represents the current state of the system.
  output_ports:
    - name: control
      type: BasicVector
      size: "len(u0)"
      description: Represents the computed control input based on the LQR control law.

PoseForceController:
  description: |
    The controller tracks the desired end-effector pose/force for a robot arm.
    It is most suitable for the situation when we require a specific force on some dimensions and a precise pose (orientation and position) on other dimensions of the end effector. 
    (The six dimensions are [roll, pitch, yaw, x, y, z])
    It cannot provide both desired force and pose on the same dimension.
    The desired force needs to be provided explicitly.
    This controller focuses solely on adhering to the required forces or precise poses for the designated dimensions, which means it is not suitable for providing compliant behaviors.
    The input is desired force (on specified dimensions) and end-effector pose (on other dimensions). The output is joint torques.
  args:
    - name: model
      type: Diagram
      description: A Diagram containing the MultiBodyPlant model of the robotic system.
    - name: force_control_axis_mask 
      type: numpy.ndarray
      description: Boolean array of length 6 to specify which axes are controlled by force. The order is [x-rotation, y-rotation, z-rotation, x-translation, y-translation, z-translation]. For each dimension, True represents force control, False represents pose control.
  input_ports:
    - name: ee_pose_target
      type: BasicVector
      size: 6
      description: Desired end-effector pose (roll, pitch, yaw, x, y, z). Only the dimensions that are not selected for force control are effective here.
    - name: ee_force_target
      type: BasicVector
      size: 6
      description: Desired end-effector force. (x-rotation, y-rotation, z-rotation, x-translation, y-translation, z-translation). Only the dimensions that are selected for force control are effective here.
    - name: arm_position
      type: BasicVector
      size: "plant.num_positions(arm)"
      description: Current joint positions of the arm.
    - name: arm_velocity
      type: BasicVector
      size: "plant.num_velocities(arm)"
      description: Current joint velocities of the arm.
  output_ports:
    - name: applied_arm_torque
      type: BasicVector
      size: "num_q"
      description: Computed joint torques for the robot arm.

IdentityController:
  description: |
    This class implements an identity controller that directly outputs the arm torque it receives.
    It is the best choice when the task controller directly outputs joint torques and we
    only need a placeholder for the tracking controller.
  args:
    - name: model
      type: Diagram
      description: A Diagram containing the MultiBodyPlant model of the robotic system.
  input_ports:
    - name: applied_arm_torque
      type: BasicVector
      size: "num_q"
      description: joint torque computed by the task controller.
  output_ports:
    - name: applied_arm_torque
      type: BasicVector
      size: "num_q"
      description: directly output the input joint torque.

CartesianStiffnessController:
  description: |
    This controller tracks a given end effector pose (orientation and position) for a robot arm with stiffness control.
    Based on the cartesian pose error, joint forces are calculated through inverse dynamics
    This controller is particularly useful when the robot needs to be compliant with external forces while tracking the reference pose. 
    The compliant behavior helps prevent excessive force that could damage the robot or the object it is interacting with. 
    Note that this controller cannot be used to track desired forces and requires a specified desired end effector pose. 
    The output consists of joint torques.
  args:
    - name: model
      type: Diagram
      description: A Diagram containing the robot model (MultiBodyPlant) for computing dynamics
  input_ports:
    - name: ee_target
      type: BasicVector
      size: 6
      description: Desired end effector target (pose or twist). [roll, pitch, yaw, x, y, z]
    - name: ee_target_type
      type: AbstractValue
      description: Type of the end effector target. This type is enum. It must be EndEffectorTarget.kPose or EndEffectorTarget.kTwist. Do not use `str`, use enum directly.
    - name: arm_position
      type: BasicVector
      size: "num_q"
      description: Current joint position of the robot arm.
    - name: arm_velocity
      type: BasicVector
      size: "num_q"
      description: Current joint velocity of the robot arm.
    - name: controller_parameters
      type: AbstractValue
      example_value:
        cartesian_stiffness: "[0.1]*3 + [200]*3"
      description: The controller can be parameterized through an abstract input port "controller_parameters" to modify its behavior during runtime, allowing changes to cartesian_stiffness and "cartesian_damping" matrices. [roll, pitch, yaw, x, y, z]
  output_ports:
    - name: applied_arm_torque
      type: BasicVector
      size: "num_q"
      description: Control torques applied to the joints of the robot arm.

SafeController:
  description: |
    This controller tracks a nominal control torque with a safe control torque to avoid collision.
    The advantage of this controller is to safeguard a nominal control to realize reactive obstacle avoidance.
    This controller is most useful in environments with clear obstacles that the robot must circumvent to complete its task. 
    Note that the object the robot is interacting with should not be considered as an obstacle.
    The output is joint torques.
  args:
    - name: model
      type: Diagram
      description: Diagram containing the multibody plant and scene graph. Require model of the robot arm and objects.
  input_ports:
    - name: arm_target
      type: BasicVector
      size: "num_q"
      description: Desired joint target for the arm. The joint target can be position, velocity, or torque, depending on the "arm_target_type" port.
    - name: arm_target_type
      type: AbstractValue
      description: Type of the target. This type is enum. The value must be JointTarget.kPosition, JointTarget.kVelocity, or JointTarget.kTorque. Do not use `str`, use enum directly.
    - name: arm_position
      type: BasicVector
      size: "num_q"
      description: Current joint position of the arm.
    - name: arm_velocity
      type: BasicVector
      size: "num_q"
      description: Current joint velocity of the arm.
  output_ports:
    - name: applied_arm_torque
      type: BasicVector
      size: "num_q"
      description: Computed joint torque for the arm.


CartesianInterpolationController:
  description: |
    This controller generates a trajectory to a target position through linear interpolation. 
    The output is the end-effector pose along the linear trajectory. 
    This controller is suitable for interpolating trajectories between the current pose and a distant target pose, ensuring the intermediate pose is continuous and smooth.
  args:
    - name: model
      type: Diagram
      description: model is not useful in this controller, but should be passed in for consistency
  input_ports:
    - name: controller_parameters
      type: AbstractValue
      example_value:
        new_trajectory: true
      description: Controller parameters that can indicate the need for a new trajectory.
    - name: measured_ee_pose
      type: BasicVector
      size: 6
      description: Measured pose of the end effector in RPY_XYZ format.
    - name: execution_time
      type: BasicVector
      size: 1
      description: execution time of the interpolated trajectory
    - name: target_position
      type: BasicVector
      size: 3
      description: target position [X, Y, Z]
  output_ports:
    - name: ee_pose_nom
      type: BasicVector
      size: 6
      description: Nominal end-effector pose based on the trajectory evaluated at the current time. RPY_XYZ

KinematicTrajectoryModelPredictiveController:
  description: |
    An MPC controller using kinematic trajectory optimization to calculate a 
    collision-free trajectory in the joint space. The objective of this controller 
    is to reach a goal in cartesian space with the end effector. 
    This controller can only be used with a 
    The output is joint position.
  args:
    - name: model
      type: Diagram
      description: Diagram containing the multibody plant and scene graph. Require model of the robot arm and objects.
    - name: resolve_period
      type: float
      default: 3.0
      description: Trajectory optimization resolution period.
    - name: num_steps
      type: int
      default: 20
      description: Number of optimization steps.
  input_ports:
    - name: controller_parameters
      type: AbstractValue
      example_value:
        goal_pose: RigidTransform
      description: Controller parameters including desired goal pose for the end effector.
    - name: measured_arm_position
      type: BasicVector
      size: "num_q"
      description: Current joint position of the robot arm.
    - name: measured_arm_velocity
      type: BasicVector
      size: "num_q"
      description: Current joint velocity of the robot arm.
  output_ports:
    - name: q_nom
      type: BasicVector
      size: "num_q"
      description: Target joint positions for the robot arm.

JointStiffnessController:
  description: |
    A controller computes the necessary torques to apply to the robot's actuators to achieve desired joint position 
    based on stiffness control.
  args:
    - name: model
      type: Diagram or MultibodyPlant
      description: The model of the robotic system, either a Diagram containing the MultibodyPlant or the MultibodyPlant itself.
  input_ports:
    - name: controller_parameters
      type: AbstractValue
      description: Input port for dynamic adjustment of controller parameters, such as 'joint_stiffness' and 'joint_damping'.
    - name: arm_target_position
      type: BasicVector
      description: Target position for the arm.
    - name: arm_position
      type: BasicVector
      description: Current position of the arm.
    - name: arm_velocity
      type: BasicVector
      description: Current velocity of the arm.
  output_ports:
    - name: applied_arm_torque
      type: BasicVector
      size: "num_q" 
      description: Output port for the torques to be applied to the robot's actuators.
